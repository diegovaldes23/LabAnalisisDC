# Cargar librerías necesarias
library(tidyverse)
library(dplyr)
library(lmtest)
library(sandwich)
library(pROC)
library(caret)
library(GGally)
library(reshape2)
library(pheatmap)
# Obtener la ruta del directorio de trabajo actual
current_dir <- getwd()
# Buscar el archivo "diabetes.csv" en el directorio actual y subdirectorios
file_name <- "diabetes.csv"
file_path <- list.files(path = current_dir, pattern = file_name, recursive = TRUE, full.names = TRUE)
# Cargar el archivo si existe
if (length(file_path) > 0) {
diabetes_data <- read.csv(file_path[1])
print("Archivo cargado correctamente.")
} else {
print("El archivo no fue encontrado.")
}
# Mostrar las primeras filas del conjunto de datos
head(diabetes_data)
# Reemplazar los ceros por NA en las columnas donde no tiene sentido que haya ceros
diabetes_data$Glucose[diabetes_data$Glucose == 0] <- NA
diabetes_data$BloodPressure[diabetes_data$BloodPressure == 0] <- NA
diabetes_data$SkinThickness[diabetes_data$SkinThickness == 0] <- NA
diabetes_data$Insulin[diabetes_data$Insulin == 0] <- NA
diabetes_data$BMI[diabetes_data$BMI == 0] <- NA
diabetes_data$DiabetesPedigreeFunction[diabetes_data$DiabetesPedigreeFunction == 0] <- NA
diabetes_data$Glucose[is.na(diabetes_data$Glucose)] <- mean(diabetes_data$Glucose, na.rm = TRUE)
diabetes_data$BloodPressure[is.na(diabetes_data$BloodPressure)] <- mean(diabetes_data$BloodPressure, na.rm = TRUE)
diabetes_data$SkinThickness[is.na(diabetes_data$SkinThickness)] <- mean(diabetes_data$SkinThickness, na.rm = TRUE)
diabetes_data$Insulin[is.na(diabetes_data$Insulin)] <- mean(diabetes_data$Insulin, na.rm = TRUE)
diabetes_data$BMI[is.na(diabetes_data$BMI)] <- mean(diabetes_data$BMI, na.rm = TRUE)
diabetes_data$DiabetesPedigreeFunction[is.na(diabetes_data$DiabetesPedigreeFunction)] <- mean(diabetes_data$DiabetesPedigreeFunction, na.rm = TRUE)
head(diabetes_data)
# Estructura de los datos
str(diabetes_data)
# Resumen estadístico básico de todas las variables
summary(diabetes_data)
# Calcular la varianza de las variables numéricas
varianza <- diabetes_data %>%
summarise(across(where(is.numeric), var, na.rm = TRUE))
# Cargar librerías necesarias
library(tidyverse)
library(dplyr)
library(lmtest)
library(sandwich)
library(pROC)
library(caret)
library(GGally)
library(reshape2)
library(pheatmap)
# Obtener la ruta del directorio de trabajo actual
current_dir <- getwd()
# Buscar el archivo "diabetes.csv" en el directorio actual y subdirectorios
file_name <- "diabetes.csv"
file_path <- list.files(path = current_dir, pattern = file_name, recursive = TRUE, full.names = TRUE)
# Cargar el archivo si existe
if (length(file_path) > 0) {
diabetes_data <- read.csv(file_path[1])
print("Archivo cargado correctamente.")
} else {
print("El archivo no fue encontrado.")
}
# Mostrar las primeras filas del conjunto de datos
head(diabetes_data)
# Reemplazar los ceros por NA en las columnas donde no tiene sentido que haya ceros
diabetes_data$Glucose[diabetes_data$Glucose == 0] <- NA
diabetes_data$BloodPressure[diabetes_data$BloodPressure == 0] <- NA
diabetes_data$SkinThickness[diabetes_data$SkinThickness == 0] <- NA
diabetes_data$Insulin[diabetes_data$Insulin == 0] <- NA
diabetes_data$BMI[diabetes_data$BMI == 0] <- NA
diabetes_data$DiabetesPedigreeFunction[diabetes_data$DiabetesPedigreeFunction == 0] <- NA
diabetes_data$Glucose[is.na(diabetes_data$Glucose)] <- mean(diabetes_data$Glucose, na.rm = TRUE)
diabetes_data$BloodPressure[is.na(diabetes_data$BloodPressure)] <- mean(diabetes_data$BloodPressure, na.rm = TRUE)
diabetes_data$SkinThickness[is.na(diabetes_data$SkinThickness)] <- mean(diabetes_data$SkinThickness, na.rm = TRUE)
diabetes_data$Insulin[is.na(diabetes_data$Insulin)] <- mean(diabetes_data$Insulin, na.rm = TRUE)
diabetes_data$BMI[is.na(diabetes_data$BMI)] <- mean(diabetes_data$BMI, na.rm = TRUE)
diabetes_data$DiabetesPedigreeFunction[is.na(diabetes_data$DiabetesPedigreeFunction)] <- mean(diabetes_data$DiabetesPedigreeFunction, na.rm = TRUE)
head(diabetes_data)
# Estructura de los datos
str(diabetes_data)
# Resumen estadístico básico de todas las variables
summary(diabetes_data)
# Calcular la varianza de las variables numéricas
varianza <- diabetes_data %>%
summarise(across(where(is.numeric), var, na.rm = TRUE))
# Mostrar la varianza
print("Varianza de las variables:")
print(varianza)
# Calcular la matriz de correlación
correlation_matrix <- cor(diabetes_data %>% select_if(is.numeric))
# Graficar la matriz de correlación con ggplot2
corr_melt <- melt(correlation_matrix)
ggplot(data = corr_melt, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
labs(title = "Matriz de correlación entre variables numéricas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Resumen estadístico básico de todas las variables, con los datos limpios.
summary(diabetes_data)
# Parte 3: Estadísticas básicas
# Funciones media, mediana, desviación estándar y varianza a todas las columnas numéricas
sapply(diabetes_data, function(x) c(Media = mean(x, na.rm = TRUE),
Mediana = median(x, na.rm = TRUE),
Desviación = sd(x, na.rm = TRUE),
Varianza = var(x, na.rm = TRUE)))
# Contar el número de filas (mujeres) en el conjunto de datos
nrow(diabetes_data)
# Histograma con curva de densidad para Glucosa
hist(diabetes_data$Glucose, probability = TRUE, main = "Distribución de Glucosa", col = "lightblue", border = "black")
lines(density(diabetes_data$Glucose, na.rm = TRUE), col = "blue", lwd = 2)
# Histograma con curva de densidad para Presión Sanguínea
hist(diabetes_data$BloodPressure, probability = TRUE, main = "Distribución de Presión Sanguínea", col = "lightgreen", border = "black")
lines(density(diabetes_data$BloodPressure, na.rm = TRUE), col = "green", lwd = 2)
# Histograma con curva de densidad para Grosor de Piel
hist(diabetes_data$SkinThickness, probability = TRUE, main = "Distribución de Grosor de Piel", col = "lightpink", border = "black")
lines(density(diabetes_data$SkinThickness, na.rm = TRUE), col = "red", lwd = 2)
# Histograma con curva de densidad para Insulina
hist(diabetes_data$Insulin, probability = TRUE, main = "Distribución de Insulina", col = "lightyellow", border = "black")
lines(density(diabetes_data$Insulin, na.rm = TRUE), col = "orange", lwd = 2)
# Histograma con curva de densidad para BMI
hist(diabetes_data$BMI, probability = TRUE, main = "Distribución de BMI", col = "lightcyan", border = "black")
lines(density(diabetes_data$BMI, na.rm = TRUE), col = "cyan", lwd = 2)
# Histograma con curva de densidad para Edad
hist(diabetes_data$Age, probability = TRUE, main = "Distribución de Edad", col = "lightgray", border = "black")
lines(density(diabetes_data$Age, na.rm = TRUE), col = "darkgray", lwd = 2)
# Histograma con curva de densidad para Embarazos
hist(diabetes_data$Pregnancies, probability = TRUE, main = "Distribución de Cantidad de Embarazos", col = "lightpink", border = "black")
lines(density(diabetes_data$Pregnancies, na.rm = TRUE), col = "pink", lwd = 2)
# Histograma con curva de densidad para Predisposición genética
hist(diabetes_data$DiabetesPedigreeFunction, probability = TRUE, main = "Distribución de Predisposición Genética", col = "lightyellow", border = "black")
lines(density(diabetes_data$DiabetesPedigreeFunction, na.rm = TRUE), col = "yellow", lwd = 2)
# Prueba de normalidad de Shapiro-Wilk para las variables.
shapiro.test(diabetes_data$Glucose)
shapiro.test(diabetes_data$BloodPressure)
shapiro.test(diabetes_data$SkinThickness)
shapiro.test(diabetes_data$Insulin)
shapiro.test(diabetes_data$BMI)
shapiro.test(diabetes_data$Age)
shapiro.test(diabetes_data$Pregnancies)
shapiro.test(diabetes_data$DiabetesPedigreeFunction)
# Boxplot de Glucose por Outcome
ggplot(diabetes_data, aes(x = as.factor(Outcome), y = Glucose, fill = as.factor(Outcome))) +
geom_boxplot() +
labs(title = "Boxplot de Glucose por Outcome", x = "Outcome", y = "Glucose")
# Boxplot de BMI por Outcome
ggplot(diabetes_data, aes(x = Outcome, y = BMI, fill = as.factor(Outcome))) +
geom_boxplot() +
labs(title = "Boxplot de BMI por Outcome", x = "Outcome", y = "BMI")
# Boxplot de BloodPressure por Outcome
ggplot(diabetes_data, aes(x = Outcome, y = BloodPressure, fill = as.factor(Outcome))) +
geom_boxplot() +
labs(title = "Boxplot de BloodPressure por Outcome", x = "Outcome", y = "BloodPressure")
# Boxplot de SkinThickness por Outcome
ggplot(diabetes_data, aes(x = Outcome, y = SkinThickness, fill = as.factor(Outcome))) +
geom_boxplot() +
labs(title = "Boxplot de SkinThickness por Outcome", x = "Outcome", y = "SkinThickness")
# Boxplot de Age por Outcome
ggplot(diabetes_data, aes(x = Outcome, y = Age, fill = as.factor(Outcome))) +
geom_boxplot() +
labs(title = "Boxplot de Age por Outcome", x = "Outcome", y = "Age")
# Boxplot de Pregnancies por Outcome
ggplot(diabetes_data, aes(x = Outcome, y = Pregnancies, fill = as.factor(Outcome))) +
geom_boxplot() +
labs(title = "Boxplot de Pregnancies por Outcome", x = "Outcome", y = "Pregnancies")
# Boxplot de DiabetesPedigreeFunction por Outcome
ggplot(diabetes_data, aes(x = Outcome, y = DiabetesPedigreeFunction, fill = as.factor(Outcome))) +
geom_boxplot() +
labs(title = "Boxplot de DiabetesPedigreeFunction por Outcome", x = "Outcome", y = "DiabetesPedigreeFunction")
# Boxplot de Insulin por Outcome
ggplot(diabetes_data, aes(x = Outcome, y = Insulin, fill = as.factor(Outcome))) +
geom_boxplot() +
labs(title = "Boxplot de Insulin por Outcome", x = "Outcome", y = "Insulin")
# Extraer las variables numéricas del conjunto de datos
variables_numericas <- diabetes_data %>% select_if(is.numeric)
# Aplicar la prueba de Wilcoxon para cada par de variables numéricas
resultados_wilcoxon <- combn(names(variables_numericas), 2, function(vars) {
# Realizar la prueba de Wilcoxon entre dos variables
prueba <- wilcox.test(variables_numericas[[vars[1]]], variables_numericas[[vars[2]]])
# Guardar el nombre de las variables y el valor p
list(
variable_1 = vars[1],
variable_2 = vars[2],
p_value = prueba$p.value
)
}, simplify = FALSE)
# Mostrar los resultados
for (res in resultados_wilcoxon) {
cat("Comparación entre", res$variable_1, "y", res$variable_2, "-> p-valor:", res$p_value, "\n")
}
# Asegurarse de que Outcome es un factor
diabetes_data$Outcome <- factor(diabetes_data$Outcome)
# Ajustar el modelo de regresión logística
modelo_logistico <- glm(Outcome ~ Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age,
data = diabetes_data,
family = binomial)
# Resumen del modelo
summary(modelo_logistico)
# Graficar pair plot
ggpairs(diabetes_data, aes(color = Outcome))
# Obtener los coeficientes del modelo de regresión logística
coeficientes <- as.data.frame(coef(modelo_logistico))
# Renombrar la columna con los coeficientes
colnames(coeficientes) <- "Coeficiente"
# Crear una columna con los nombres de las variables
coeficientes$Variable <- rownames(coeficientes)
# Eliminar la fila del intercepto, si no deseas incluirla
coeficientes <- coeficientes[-1, ]
# Graficar los coeficientes
ggplot(coeficientes, aes(x = reorder(Variable, abs(Coeficiente)), y = Coeficiente)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Importancia de las variables en el modelo logístico",
x = "Variables", y = "Coeficientes del modelo")
# Predecir probabilidades de tener diabetes (Outcome = 1)
prob_predicciones <- predict(modelo_logistico, type = "response")
# Convertir probabilidades a predicciones binarias (0 o 1)
predicciones_binarias <- ifelse(prob_predicciones > 0.35, 1, 0)
# Matriz de confusión
matriz_confusion <- table(Predicho = predicciones_binarias, Real = diabetes_data$Outcome)
# Graficar la matriz de confusión
pheatmap(as.matrix(matriz_confusion), display_numbers = TRUE, color = colorRampPalette(c("bisque", "aquamarine"))(50),
fontsize_number = 14, legend = TRUE, main = "Matriz de Confusión", cluster_rows = FALSE, cluster_cols = FALSE)
# Calcular sensibilidad y especificidad
VP <- matriz_confusion[2, 2]  # Verdaderos positivos (Outcome = 1 y predicho = 1)
VN <- matriz_confusion[1, 1]  # Verdaderos negativos (Outcome = 0 y predicho = 0)
FP <- matriz_confusion[2, 1]  # Falsos positivos (Outcome = 0 pero predicho = 1)
FN <- matriz_confusion[1, 2]  # Falsos negativos (Outcome = 1 pero predicho = 0)
# Sensibilidad
sensibilidad <- VP / (VP + FN)
cat("Sensibilidad:", round(sensibilidad, 4), "\n")
# Especificidad
especificidad <- VN / (VN + FP)
cat("Especificidad:", round(especificidad, 4), "\n")
# Calcular la precisión del modelo
precision <- mean(predicciones_binarias == diabetes_data$Outcome)
print(paste("Precisión del modelo:", round(precision, 4)))
# Calcular la curva ROC y AUC
roc_obj <- roc(diabetes_data$Outcome, prob_predicciones)
plot(roc_obj)
auc(roc_obj)
# Encontrar el mejor umbral según la curva ROC
coords(roc_obj, "best", ret = "threshold")
# Cargar los paquetes
library(clustMixType)
library(cluster)
library(factoextra)
# Obtener la ruta del directorio de trabajo actual
current_dir <- getwd()
# Buscar el archivo "diabetes.csv" en el directorio actual y subdirectorios
file_name <- "diabetes.csv"
file_path <- list.files(path = current_dir, pattern = file_name, recursive = TRUE, full.names = TRUE)
# Cargar el archivo si existe
if (length(file_path) > 0) {
diabetes_data <- read.csv(file_path[1])
print("Archivo cargado correctamente.")
} else {
print("El archivo no fue encontrado.")
}
# Mostrar las primeras filas del conjunto de datos
head(diabetes_data)
